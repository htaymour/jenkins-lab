//   /* scm{
//     description("Pull files from github repo when some developers push code to github")

//     git 'https://github.com/htaymour/jenkins-lab.git' --origin maain

//   } */
//   steps { 
//     script {
   
//     mail to: 'haytham.taymour@orange.com',
//     subject: "Job '${JOB_NAME}' (${BUILD_NUMBER}) is waiting for input",
//     body: "Please go to ${BUILD_URL} and verify the build"  
// }}

// ============== NOTES =============
// curl -o $WORKSPACE/ccr1 -L 'https://github.com/htaymour/jenkins-lab/blob/main/ccr/ccr1'



pipeline {
    agent none
    stages {
        stage('Init') {
            agent any
            options {
                // Timeout counter starts BEFORE agent is allocated
                timeout(time: 100, unit: 'SECONDS')
            }
            steps {
                  echo ' ** Init statge steps !'
                  sh '''
                  pwd
                  cd ccr
                  echo 'CCR request downloaded. Showing contents of latest file :'
                  //cat "$(ls -tp | grep -v / | head -n1)"
                  pwd
                  '''


            script {
                  def ccr_file = sh(script: "ls ccr/ -tp | grep -v / | head -n1", returnStdout: true)
                  echo "The captured file is: ${ccr_file}"
                  // def copier = sh (script: "cp /var/lib/jenkins/workspace/ci-monitoring/ccr/${ccr_file} ./ ", returnStdout: true)
                //   fileOperations([fileCopyOperation(
                //                  excludes: '',
                //                  flattenFiles: false,
                //                  includes: "${ccr_file}",
                //                  targetLocation: "../cac/${ccr_file}"
                //                  )]).

                  sh (script: "docker build /var/lib/jenkins/workspace/ci-monitoring/cac/.  -t deployer ", returnStdout: true)
                  //sh ("docker run deployer python start_pipe.py ${ccr_file} ") 
                  sh ("docker run deployer cat ${ccr_file} ") 

            }
                
                

            }
        }
    }
}