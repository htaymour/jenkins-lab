#!groovy

pipeline {
    agent none
    //  environment {
    //     GIT_CREDENTIALS_ID = 'git-credentials' // The ID you gave your credentials
    //     GIT_USER_EMAIL = 'user@example.com' // The user's email to configure in Git
    //     GIT_USER_NAME = 'Your Name' // The user's name to configure in Git
    // }
    stages {
        stage('Init') {
            agent any
            options {
                // Timeout counter starts BEFORE agent is allocated
                timeout(time: 100, unit: 'SECONDS')
            }
            steps {
                  echo ' ** Init statge steps !'
                  sh '''
                  pwd
                  echo 'CCR request downloaded. Showing contents of latest file :'
                  cat ccr/"$(ls ccr/ -r  | grep ccr | head -n1)"
                  '''
                  //cat ccr/"$(ls ccr/ -r  | grep ccr | head -n1)"
                  // pwd
                  


            script {
              
                  def ccr_file=sh(script: "ls ccr/ -r  | grep ccr | head -n1", returnStdout: true).replaceAll("[\\n\\r]", "")
                  echo "The captured file is: ${ccr_file}        * Sent from Jenkins "
                  // sh (script:"cp ccr/${ccr_file} cac/.")
                //   sh (script: "docker build /var/lib/jenkins/workspace/ci-monitoring/cac/.  -t deployer ", returnStdout: true)
                def container=sh(script: "docker ps -aq", returnStdout: true).replaceAll("[\\n\\r]", "").replaceAll(" ", "")
                  if (container == '') {
                        echo 'No old Container exist'
                    } else {
                        echo "The old container name is ${container}"
                        sh ("docker rm -f ${container}")
                    }
                  // sh ("git branch jenkinslogs")          // needed first time only - done manually on vm.  
                  sh ("git checkout jenkinslogs")          // needed before modifying the files to push back via plugin to branch logs
                  // sh ("git merge origin/main")
                  sh ("docker run -d --name deployer2 deployer tail -f /dev/null")                      // Start the container 
                  sh ("docker cp /var/lib/jenkins/workspace/ci-monitoring/cac/. deployer2:/usr/src/.")  // only used when skip build
                  sh ("docker cp /var/lib/jenkins/workspace/ci-monitoring/ccr/${ccr_file} deployer2:/usr/src/ ")
                  sh ("docker exec deployer2 python /usr/src/start_pipe.py ${ccr_file} ")               // Deploy the job on container
                  sh ("docker cp deployer2:/usr/src/logs/. /var/lib/jenkins/workspace/ci-monitoring/logs/.")  //getting logs from finished job
                  sh ("docker rm -f deployer2")                                                       // cleaning up
                  // sh ("rm ${ccr_file}")

                  // updating repo
                  // checkout([$class: 'GitSCM', branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[credentialsId: '665917fc-dd64-48aa-bd85-6a3a9260047c', url: 'https://github.com/<snip>.git']]])
                  withCredentials([usernamePassword(credentialsId: 'github_api_token', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                      sh '''
                      echo "${GIT_USERNAME}"
                      echo "${GIT_PASSWORD}"
                      git config --global user.name "${GIT_USERNAME}"
                      git config --global user.password "${GIT_PASSWORD}"
                      git add .
                      git commit -am "Jenkis auto-commit by change file $ccr_file build number $BUILD_NUMBER"
                      git push "https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/${GIT_USERNAME}/jenkins-lab.git" jenkinslogs
                      '''
                      
                  }
            }
            }
        }
    }
}

